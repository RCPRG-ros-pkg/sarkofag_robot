import("rtt_ros")

ros.import("rtt_rospack")

runScript( ros.find("sark_bringup") + "/config/common-imports.ops")


ros.import("ec_hardware")
ros.import("ec_drivers")



loadComponent("EC","ECHardware")
setActivityOnCPU("EC", 0.001, 6, ORO_SCHED_RT, 3)
EC.loadService("rosparam")
EC.loadService("elmo_driver")
EC.rosparam.getAll()
EC.configure();


loadComponent("ECManager","ECManager")
setActivity("ECManager", 0.1, 4, ORO_SCHED_RT);
ECManager.loadService("rosparam")
ECManager.rosparam.getAll()
ECManager.configure()


//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("SarkScheme", "conman::Scheme");
setActivity("SarkScheme", 0.002, 5, ORO_SCHED_RT);
SarkScheme.loadService("rosparam")
SarkScheme.rosparam.getAll()
SarkScheme.loadService("conman_ros")
SarkScheme.configure()


loadComponent("SarkDiag", "SarkDiagnostic")
setActivity("SarkDiag", 0.1, 1, ORO_SCHED_RT)
SarkDiag.loadService("rosparam");
SarkDiag.rosparam.getAll();

stream("SarkDiag.Diagnostics", ros.comm.topic("/diagnostics"));
SarkDiag.configure()

loadComponent("SarkofagIM2RM","IM2RM")
SarkofagIM2RM.loadService("rosparam")
SarkofagIM2RM.rosparam.getAll()
SarkofagIM2RM.rosparam.getParam("~/SarkofagMotorParameters/enc_res", "enc_res")
SarkofagIM2RM.configure()


loadComponent("SarkofagLimitDetector","LimitDetector")
SarkofagLimitDetector.loadService("rosparam")
SarkofagLimitDetector.rosparam.getAll()
SarkofagLimitDetector.rosparam.getParam("~/SarkofagMotorParameters/upper_limits", "upper_limits")
SarkofagLimitDetector.rosparam.getParam("~/SarkofagMotorParameters/lower_limits", "lower_limits")
SarkofagLimitDetector.configure()


// Motors Regulators


loadComponent("SarkofagRegulator","SarkRegulator")
SarkofagRegulator.loadService("rosparam")
SarkofagRegulator.rosparam.getAll()
SarkofagRegulator.configure()


// Sarkofag double port spliter

loadComponent("SarkofagPortDoubleSplit_hw_cp","PortDoubleSplit")
SarkofagPortDoubleSplit_hw_cp.loadService("rosparam")
SarkofagPortDoubleSplit_hw_cp.rosparam.getAll()
SarkofagPortDoubleSplit_hw_cp.configure()

// Sarkofag double port spliter hw_to_reg

loadComponent("SarkofagPortDoubleSplit_hw_to_reg","PortDoubleSplit")
SarkofagPortDoubleSplit_hw_to_reg.loadService("rosparam")
SarkofagPortDoubleSplit_hw_to_reg.rosparam.getAll()
SarkofagPortDoubleSplit_hw_to_reg.configure()

loadComponent("SarkofagPortDoubleAggregate_im2rm","PortDoubleAggregate")
SarkofagPortDoubleAggregate_im2rm.loadService("rosparam")
SarkofagPortDoubleAggregate_im2rm.rosparam.getAll()
SarkofagPortDoubleAggregate_im2rm.configure()

// SarkofagM2J

loadComponent("SarkofagM2J","SarkofagM2J")
SarkofagM2J.configure()

// SarkofagJ2M

loadComponent("SarkofagJ2M","SarkofagJ2M")
SarkofagJ2M.configure()


// SarkofagSplineTrajectoryGeneratorJoint

loadComponent("SarkofagSplineTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
SarkofagSplineTrajectoryGeneratorJoint.loadService("rosparam");
SarkofagSplineTrajectoryGeneratorJoint.rosparam.getAll();
connect("SarkofagM2J.JointPosition","SarkofagSplineTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorJoint.JointPositionCommand","SarkofagJ2M.JointPosition", ConnPolicy())
SarkofagSplineTrajectoryGeneratorJoint.configure()


// SarkofagSplineTrajectoryGeneratorMotor

loadComponent("SarkofagSplineTrajectoryGeneratorMotor", "InternalSpaceSplineTrajectoryGenerator")
SarkofagSplineTrajectoryGeneratorMotor.loadService("rosparam");
SarkofagSplineTrajectoryGeneratorMotor.rosparam.getAll();

connect("SarkofagLimitDetector.OutputPort","SarkofagPortDoubleSplit_hw_cp.InputPort", ConnPolicy())

connect("SarkofagIM2RM.RadianMotorPosition","SarkofagSplineTrajectoryGeneratorMotor.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorMotor.JointPositionCommand","SarkofagLimitDetector.InputPort", ConnPolicy())
SarkofagSplineTrajectoryGeneratorMotor.configure()


connect("EC.sarkofag.motor_current_command","SarkofagRegulator.computedPwm_out", ConnPolicy())

connect("SarkofagPortDoubleAggregate_im2rm.InputPort_0","EC.sarkofag.motor_position", ConnPolicy())
connect("SarkofagIM2RM.IncrementalMotorPosition","SarkofagPortDoubleAggregate_im2rm.OutputPort", ConnPolicy())
//connect("SarkofagRegulator.MeasuredPosition","SarkofagPortDoubleSplit_hw_to_reg.OutputPort_0", ConnPolicy())
connect("SarkofagRegulator.MeasuredPosition","EC.sarkofag.motor_position", ConnPolicy())



connect("SarkofagIM2RM.RadianMotorPosition","SarkofagM2J.MotorPosition", ConnPolicy())
connect("SarkofagJ2M.MotorPosition", "SarkofagLimitDetector.InputPort", ConnPolicy())
connect("SarkofagPortDoubleSplit_hw_cp.OutputPort_0","SarkofagRegulator.DesiredPosition", ConnPolicy())


addPeer("SarkScheme", "SarkofagIM2RM");


addPeer("SarkScheme", "SarkofagRegulator");
addPeer("SarkScheme", "SarkofagPortDoubleSplit_hw_cp")
addPeer("SarkScheme", "SarkofagPortDoubleSplit_hw_to_reg")
addPeer("SarkScheme", "SarkofagPortDoubleAggregate_im2rm")
addPeer("SarkScheme", "SarkofagLimitDetector")
addPeer("SarkScheme", "SarkofagM2J");
addPeer("SarkScheme", "SarkofagJ2M");
addPeer("SarkScheme", "SarkofagSplineTrajectoryGeneratorJoint");
addPeer("SarkScheme", "SarkofagSplineTrajectoryGeneratorMotor");

addPeer("ECManager", "EC");
addPeer("ECManager", "SarkScheme");

SarkScheme.addBlock("SarkofagIM2RM");



SarkScheme.addBlock("SarkofagRegulator")
SarkScheme.addBlock("SarkofagPortDoubleSplit_hw_cp")
SarkScheme.addBlock("SarkofagPortDoubleSplit_hw_to_reg")
SarkScheme.addBlock("SarkofagLimitDetector")
SarkScheme.addBlock("SarkofagPortDoubleAggregate_im2rm")
SarkScheme.addBlock("SarkofagM2J");
SarkScheme.addBlock("SarkofagJ2M");
SarkScheme.addBlock("SarkofagSplineTrajectoryGeneratorJoint");
SarkScheme.addBlock("SarkofagSplineTrajectoryGeneratorMotor");



//
// SarkofagSplineTrajectoryActionJoint
// 

loadComponent("SarkofagSplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivity("SarkofagSplineTrajectoryActionJoint",0.01 ,2 ,ORO_SCHED_RT)
SarkofagSplineTrajectoryActionJoint.loadService("rosparam");
SarkofagSplineTrajectoryActionJoint.rosparam.getAll();

SarkofagSplineTrajectoryActionJoint.loadService("actionlib")
SarkofagSplineTrajectoryActionJoint.actionlib.connect("/sarkofag/spline_trajectory_action_joint")

connect("SarkofagSplineTrajectoryActionJoint.trajectoryPtr","SarkofagSplineTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("SarkofagM2J.JointPosition","SarkofagSplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorJoint.JointPositionCommand","SarkofagSplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())


SarkofagSplineTrajectoryActionJoint.configure()


//
// SarkofagSplineTrajectoryActionMotor
// 

loadComponent("SarkofagSplineTrajectoryActionMotor", "InternalSpaceSplineTrajectoryAction")
setActivity("SarkofagSplineTrajectoryActionMotor",0.01 ,2 ,ORO_SCHED_RT)
SarkofagSplineTrajectoryActionMotor.loadService("rosparam");
SarkofagSplineTrajectoryActionMotor.rosparam.getAll();
SarkofagSplineTrajectoryActionMotor.rosparam.getParam("~/SarkofagMotorParameters/upper_limits", "upper_limits")
SarkofagSplineTrajectoryActionMotor.rosparam.getParam("~/SarkofagMotorParameters/lower_limits", "lower_limits")
SarkofagSplineTrajectoryActionMotor.loadService("actionlib")
SarkofagSplineTrajectoryActionMotor.actionlib.connect("/sarkofag/spline_trajectory_action_motor")

connect("SarkofagSplineTrajectoryActionMotor.trajectoryPtr","SarkofagSplineTrajectoryGeneratorMotor.trajectoryPtr", ConnPolicy())
connect("SarkofagIM2RM.RadianMotorPosition","SarkofagSplineTrajectoryActionMotor.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorMotor.JointPositionCommand","SarkofagSplineTrajectoryActionMotor.JointPositionCommand", ConnPolicy())



SarkofagSplineTrajectoryActionMotor.configure()

loadComponent("SarkofagJntPub", "JointStatePublisher");
setActivity("SarkofagJntPub", 0.01, 2, ORO_SCHED_RT);
SarkofagJntPub.loadService("rosparam");
SarkofagJntPub.rosparam.getAll();

connect("SarkofagM2J.JointPosition", "SarkofagJntPub.JointPosition", ConnPolicy());
connect("SarkofagM2J.JointPosition", "SarkofagJntPub.JointVelocity", ConnPolicy());
connect("SarkofagM2J.JointPosition", "SarkofagJntPub.JointEffort", ConnPolicy());

stream("SarkofagJntPub.joint_state", ros.comm.topic("sarkofag/joint_states"));
stream("SarkofagJntPub.joint_state", ros.comm.topic("/joint_states"));

SarkofagJntPub.configure()



SarkScheme.start()

EC.start()
//ECManager.start()

//SarkofagRegulator.start()
SarkofagPortDoubleSplit_hw_cp.start()
SarkofagPortDoubleSplit_hw_to_reg.start()
SarkofagLimitDetector.start()
SarkofagPortDoubleAggregate_im2rm.start()
SarkofagM2J.start()
SarkofagJ2M.start()
SarkofagSplineTrajectoryActionJoint.start()
SarkofagSplineTrajectoryActionMotor.start()
SarkofagJntPub.start()

SarkofagIM2RM.start()
SarkDiag.start()
